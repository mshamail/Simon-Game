/* 

Game rules:
1. At the start, Simon's game will randomly give you a signal ( one color will pop up).
2. You have to repeat the signal by pressing the same color. 
3. Simon will duplicate the first signal and add a random one. 
4. You need to repeat these two signals by pressing the same color lenses, in the order.
5. Simon will duplicate these first two signals and add one.
6. You need to repeat these three signals in the order.
7. Simon will repeat all three signals and add one.
8. Continue playing as long as you can repeat the sequence.
9. After the 5th, 9th and 13th signals in a sequence, Simon will automatically speed up. That means you need to add Skill levels.
10. If you fail to repeat a sequence exactly, or if you take more then 5 seconds to repeat a signal, Simon responds with a "REZZ" sound.  That means you've lost, and the sequence of signals ends. GAME OVER.

*/

$(document).ready(function(){
    
    /************************************************** Variables & Arrays **************************************************/

    var colours = ["green", "red", "yellow", "blue"]; // Array[0,1,2,3] of possible colours in the sequence
    var currentLevel=0; // Track the current level of the game
    var computerSequence=[]; // Array to store the sequence of colours generated by the computer
    var userSequence=[]; // Array to store the sequence of colours input by the user
    var started = false; // Flag to check if the game has started

    /***************************************** Game Start, Continue, and Start Over ******************************************/
    
    // Function to start the game
    function startGame() {
        $(document).on("keydown", function() { // Start the game on a keypress 
            if (!started) { // Check if the game has already started
                $(document).off("keydown"); // Remove keydown event listener
                $("#level-title").text("Level " + currentLevel); // Change title to Game Level after starting.
                computerSequenceGenerator(); // Generate the first colour in the sequence
                userInput();  // Start listening for user input
                started = true; // Set the started flag to true
            }
        });
    }
    
    // Function to continue the game to the next level
    function continueGame() {
        userSequence=[]; // Reset the user's sequence
        currentLevel++; // Increment the current level
        $("#level-title").text("Level "+currentLevel); // Update the game title to the new level
        setTimeout(function() {
            computerSequenceGenerator(); // Generate the next colour in the sequence after 500ms
        }, 500);
    }

    // Function to reset the game variables and restart the game
    function startOver() {
        currentLevel = 0; // Reset the current level
        computerSequence = []; // Clear the computer's sequence
        userSequence = []; // Clear the user's sequence
        started = false; // Reset the started flag
        $("#level-title").text("Press A Key to Start"); // Display the start game message
    }
    
    startGame(); // Call the startGame function to initialize the game
    
    /***************************************** Sequence Generators and User Inputs ******************************************/

    // Function to generate the computer's sequence
    function computerSequenceGenerator(){
        var randomNum = Math.floor(Math.random()*4); // Generate a random number between 0 and 3
        var colourPicked = colours[randomNum]; // Pick a colour based on the random number
        computerSequence.push(colourPicked); // Add the chosen colour to the computer's sequence
        buttonAnimate(colourPicked); // Animate the button for the chosen colour
        playAudio(colourPicked); // Play the audio for the chosen colour
        console.log(computerSequence);
    }

    // Function to handle user input
    function userInput() {
        $("div[type='button']").on("click", function() { // Add click event listener to buttons
            var buttonClicked = $(this).attr('id'); // Get the ID of the clicked button
            userSequence.push(buttonClicked); // Add the ID to the user's sequence
            buttonAnimate(buttonClicked); // Animate the clicked button
            playAudio(buttonClicked); // Play the audio for the clicked button
            sequenceMatch(userSequence.length - 1); // Check if the latest button in the user's sequence matches the corresponding button in the computer's sequence.
            console.log(userSequence);
        });
    }

    /******************************************* Button Animation & Audio Playing *******************************************/

    // Function to animate the button being selected
    function buttonAnimate(currentColor) {
        $("#"+ currentColor).addClass("pressed"); // Add the 'pressed' class to the button
        setTimeout(function() {
            $("#"+ currentColor).removeClass("pressed"); // Remove the 'pressed' class after 100ms
        }, 100);
    }

    // Function to play audio for a given colour
    function playAudio(name) {
        var audio = new Audio("sounds/" + name + ".mp3"); // Create a new audio object with the corresponding sound file
        audio.play(); // Play the audio
    }

    /****************************************************** Game Logic ******************************************************/
    
    // Function to check if the user's sequence matches the computer's sequence
    function sequenceMatch(currentIndex) {
        if (computerSequence[currentIndex] === userSequence[currentIndex]){ // Check if the current button in the user's sequence matches the computer's sequence
                if (userSequence.length === computerSequence.length) { // Check if the user has completed the sequence
                    setTimeout(function() {
                        continueGame(); // Continue the game if the sequence is complete after 1 second
                    }, 1000);
                }
        } else { // If the sequences do not match
            playAudio("wrong"); // Play the 'wrong' sound
            $("body").addClass("game-over"); // Add the 'game-over' class to the body
            $("#level-title").text("Game Over, Press Any Key to Restart"); // Display 'Game Over' message

            setTimeout(function() {
                $("body").removeClass("game-over"); // Remove the 'game-over' class after 200ms
            }, 200);

            startOver(); // Restart the game
        }
    }

});

/****************************************************** Flow Diagram ******************************************************/
/*

Flow Diagram:

1. START
   v
2. DOCUMENT READY
   v
3. Initialize Variables
   v
4. startGame()
   v
5. Wait for Key Press
   v
6. Key Press Detected?
   |--- No ---> Wait for Key Press
   v
7. Yes
   v
8. Set started to true, Display "Level 0", computerSequenceGenerator(), userInput()
   v
9. Button Click Detected
   v
10. Add Clicked Button to userSequence, buttonAnimate(buttonClicked), playAudio(buttonClicked), sequenceMatch(currentIndex)
    v
11. Sequences Match?
    |--- No ---> playAudio("wrong"), Add "game-over" Class, Display "Game Over", Wait 200ms, Remove "game-over" Class, startOver(), Wait for Key Press
    v
12. Yes
    v
13. Sequence Complete?
    |--- No ---> Continue Listening for Button Clicks
    v
14. Yes
    v
15. Wait 1 Second, continueGame(), Increment currentLevel, Display "Level X", Wait 500ms, computerSequenceGenerator(), userInput()
    v
16. Repeat Button Click Detection, Continue Game Loop

*/
/************************************************* Sequence Match Function *************************************************/
/*

How the Sequence Matching Works in the Simon Game:

    Start of the Game:
        The game starts at level 0.
        The computer generates a sequence of colors (e.g., ["red", "blue", "green"]).
        The user starts with an empty sequence.

    User Input:
        When the user clicks a button, the color of that button is added to the user's sequence (e.g., ["red"]).
        The button animates and plays a sound.

    Matching the Sequences:
        The game checks if the color just added by the user matches the corresponding color in the computer's sequence. For example, if the computer's 
        sequence is ["red", "blue", "green"] and the user has clicked ["red"], it checks if "red" matches the first color in the computer's sequence.

    Checking for Completion:
        If the color matches, it checks if the user has completed the entire sequence.
        If the user has completed the sequence, it moves to the next level. Otherwise, it continues waiting for the user to complete the sequence.

    Advancing to the Next Level:
        Once the user completes the sequence for the current level, the game moves to the next level.
        The computer adds a new color to the sequence, the level increments, and the user starts a new sequence for the new level.

    Repeating the Process:
        The game continues in this manner, with the computer adding colors to the sequence and the user trying to match the sequence, until the user 
        makes a mistake or completes all the levels.

NOTE:
The sequenceMatch function is designed to check if the current color in the user's sequence matches the corresponding color in the computer's sequence. 
If the colors match, it checks if the user has completed the entire sequence. If the user has completed the sequence, it triggers the continueGame function 
to proceed to the next level. However, if the colors match but the user has not completed the entire sequence yet (i.e., the lengths of the user's sequence 
and the computer's sequence are not the same), the function does not call userInput() again. This is because the game logic assumes that the user will 
continue to click buttons in the correct sequence until the sequence is complete. The userInput() function is already listening for button clicks, so it 
doesn't need to be explicitly called again in this scenario. In the context of the game, the userInput() function is set up to listen for button clicks on 
the game board. This setup is done using the $("div[type='button']").on("click", ...) code inside the userInput() function. Once the userInput() function 
is initially called, it sets up this event listener. This means that the function is constantly "listening" for button clicks, even though it's not 
explicitly called again within the game logic. Each time the user clicks a button, the event listener triggers the code inside the userInput() function 
to run, adding the clicked button to the userSequence and checking if the sequence matches. So, even though userInput() is not called explicitly after the 
initial setup, it is still active and responsive to user interactions because of the event listener.If the user makes a mistake and the colors don't match, 
the game will handle that in the else part of the sequenceMatch function, where it will display the "Game Over" message and allow the user to restart the game.

*/



